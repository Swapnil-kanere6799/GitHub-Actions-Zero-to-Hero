name: remediation/Remediation-Run-Command

run-name: remediation/Remediation-Run-Command-${{ inputs.AlertName }}-${{ inputs.InstanceId }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      InstanceId:
        type: string
        description: Instance ID
        required: true

      StackName:
        type: string
        description: Stack Name
        required: true

      AlertName:
        type: string
        description: Alert Name
        required: true

jobs:
  execute-run-command-remediation:
    runs-on: ubuntu-latest
    concurrency:
      group: run-command-${{ inputs.StackName }}
      cancel-in-progress: false
    steps:
      - name: Checkout Infra-Actions repo
        id: checkout-infra-actions-repo
        uses: actions/checkout@v3

      - name: Get stack prefix
        id: get-stack-prefix
        run: |
          set -euxo pipefail
          stack_prefix=$(echo "${{ inputs.StackName }}" | cut -d '-' -f1)
          echo "STACK_PREFIX=$stack_prefix" >> $GITHUB_OUTPUT

      - name: Get stack region
        id: get-stack-region
        run: |
          set -euxo pipefail
          region=$(./scripts/utils/get_stack_region.bash ${{ steps.get-stack-prefix.outputs.STACK_PREFIX }})
          echo "REGION=${region}" >> $GITHUB_OUTPUT   

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.get-stack-region.outputs.REGION }}

      - name: Get SSM Document Name
        id: get-ssm-doc
        run: |
          documents=$(aws ssm list-documents --region ${{ steps.get-stack-region.outputs.REGION }} --filters Key=Owner,Values=Self --query "DocumentIdentifiers[*].Name" --output json)
          document_name=$(echo "$documents" | jq -r '.[] | select(contains("SsmDocument-RemediationActionSsmDocument"))')  
          echo "Using SSM Document: $document_name"
          echo "DOC_NAME=$document_name" >> "$GITHUB_OUTPUT"

      - name: Run SSM Run Command for ${{ inputs.AlertName }}
        id: send-command
        run: |
          cmd_id=$(aws ssm send-command \
            --document-name "${{ steps.get-ssm-doc.outputs.DOC_NAME }}" \
            --instance-ids ${{ inputs.InstanceId }} \
            --region ${{ steps.get-stack-region.outputs.REGION }} \
            --parameters AlertName=${{ inputs.AlertName }} \
            --query 'Command.CommandId' --output text)
          
          echo "SSM Command ID: $cmd_id"
          echo "SSM Run Command Link- https://${{ steps.get-stack-region.outputs.REGION }}.console.aws.amazon.com/systems-manager/run-command/$cmd_id?region=${{ steps.get-stack-region.outputs.REGION }}"
          echo "CMD_ID=$cmd_id" >> "$GITHUB_OUTPUT"

      - name: Wait and Get Run Command Status
        id: check_status
        run: |
          while true; do
            echo "Checking SSM command status..."
            OUTPUT=$(aws ssm get-command-invocation \
              --command-id ${{ steps.send-command.outputs.cmd_id }} \
              --instance-id ${{ inputs.InstanceId }} \
              --output json)
          
            STATUS=$(echo "$OUTPUT" | jq -r '.Status')
          
            echo "Current SSM Command Status: $STATUS"
          
            if [[ "$STATUS" == "InProgress" ]]; then
              echo "Command is still in progress. Waiting 3 minutes before next check..."
              sleep 180
            else
              break
            fi
          done
          
          # Extract and print final output
          STDOUT=$(echo "$OUTPUT" | jq -r '.StandardOutputContent')
          STDERR=$(echo "$OUTPUT" | jq -r '.StandardErrorContent')
          
          echo "::group::Final SSM Command Output"
          echo "$STDOUT"
          echo "::endgroup::"
          
          echo "::group::Final SSM Command Errors (if any)"
          echo "$STDERR"
          echo "::endgroup::"
          
          if [[ "$STATUS" == "Success" ]]; then
            echo "SSM command completed successfully."
          else
            echo "SSM command ended with status: $STATUS. Exiting with failure."
            exit 1
          fi
                
